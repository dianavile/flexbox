 body {
    background: #e9e9e9;
}


/*NORMAL CONTAINER + items*/

.contenedor {
    background: #fff;
    padding: 10px;
    height: 300px;
    /**/
    /*para trabajar con cross axis, el contenedor necesito una altura*/
    border: 10px solid #2c3e50;
    margin: 20px;
    display: flex;
    /*FLEX CONTAINER*/
    flex-direction: row;
    /* flex-direction: column;*/
    flex-wrap: wrap;
    /*OR flex-wrap: no-wrap, wrap-reverse;*/
    /*OR SHORTCUT= flex-flow: column wrap;*/
    justify-content: space-between;
    /*space-around*/
    align-items: flex-start;
    /* align-items: center;
    align-items: flex-end;
    align-items: flex-stretch;
    align-items: flex-baseline;*/
    align-content: flex-start;
    /* align-content: center;
    align-content: flex-end;
    align-content: space-between;
    align-content: space-around;*/
}


/* flex items (children)*/

.elemento {
    background-color: #f1f1f1;
    width: 100px;
    margin: 10px;
    text-align: center;
    font-size: 30px;
}


/* flex order= agrupar todos los mismos elementos en un nivel de orden
* flex-grow reparte el espacio disponible entre los hijos elementos/items
*flex-basis el tamaño que tendra un hijo (item) antes de que se reparte el espacio
*el division de espacio se puede medir en: pixels, %, rem, em, auto (default) 
* trabajar con Flexbox= utilizar flex-basis en vez de widht y height
* flex-basis (item) tiene preterminado por flex-direction (container), si cambias flex-direction, la direction de flex-basis cambiará
* flex-basis (la medida inicial): auto ajusta el espacio al contenido
* flex = se puede poner tanto flex: (grow, shrink, basis) a la vez // para PARTES DEL LAYOUT solo
*PARA HACER LAYOUTS ENTEROS, es mejor utilizar el GRID
* align-self= una item(hijo) tiene una medicion especifica*/

.elemento1 {
    order: 0;
    flex-basis: 150px;
    /*width: 150px;*/
    /*el flex-basis es el que manda, incluso si tenemos width*/
    flex-grow: 3;
    /*flex: 0 0 auto;= none //NO es flexible*/
    /*flex: 1 1 auto; =auto // SI es flexible*/
    /*flex: number 0 0;= number // se utiliza para PROPORCIONES*/
    flex: 40;
    align-self: flex-end;
    /*CROSS-axis, puede ser flex-start, flex-end, center, stretch,  */
}

.elemento2 {
    order: 0;
    /*flex-basis: 200px;*/
    /*flex-grow:1;*/
    flex: 20;
}

.elemento3 {
    order: 0;
    /*flex-grow:1;*/
    flex: 10;
}

.elemento4 {
    order: 0;
    /*flex-grow:1;*/
    flex: 30;
}

.flex-container {
    padding: 0;
    margin: 0;
    list-style: none;
    border: 1px solid silver;
    -ms-box-orient: horizontal;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -moz-flex;
    display: -webkit-flex;
    display: flex;
}

.nowrap {
    -webkit-flex-wrap: nowrap;
    flex-wrap: nowrap;
}

.wrap {
    -webkit-flex-wrap: wrap;
    flex-wrap: wrap;
}

.wrap li {
    background: gold;
}

.wrap-reverse {
    -webkit-flex-wrap: wrap-reverse;
    flex-wrap: wrap-reverse;
}

.wrap-reverse li {
    background: deepskyblue;
}

.flex-item {
    background: tomato;
    padding: 5px;
    width: 100px;
    height: 100px;
    margin: 10px;
    line-height: 100px;
    color: white;
    font-weight: bold;
    font-size: 2em;
    text-align: center;
}
